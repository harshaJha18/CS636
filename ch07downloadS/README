Note: to run this project on UNIX/Linux/Mac or Windows:
0. For Linux/Mac only: Use "chmod +x *.sh" to make all shell scripts 
	in this directory executable.  Similarly in the database directory.
   
1. If running on topcat, edit src/main/resources/application.properties and
set the port to one of your assigned ports, preferably xxxx1 to follow
our conventions (for example, 51301). See CS636Ports.html for your ports.

2. Use "mvn clean package" when cd'd to this directory to build the jar

3. Use "run" (or run.sh) to run the webapp out of the jar (this starts
the embedded tomcat server). Let it hang.

4. Browse to localhost:9001/ to see the form (from index.html, served as a static webpage). 
Replace 9001 here with your own port if running on topcat.

5. When done, control-C the run process to bring down the server.

This project is based on Murach's ch07download, with some changes:
1. This is a Spring Boot maven project: run WebApplication as a Java app to start embedded tomcat.
2. UserIO.java has better exception handling, and exceptions have error page error.jsp
3. The project has its own sound directory, and the pages refer to its own copies of the mp3's.
4. The download is handled by HTML5 <audio> for products 8601 and pf01. The other two products
   (pf02 and jr01) use Murach's non-HTML5 pages
5. For product 8601, the <audio> src= has a URL to the mp3 file by direct web access.
6. For product pf01, the <audio> src= has a URL back to the servlet, allowing the servlet
   to use access control to the file, and serve out a file not directly accessible on the web.
   (But in fact it serves out a web-accessible file here.)
7. The page that displays cookies now also displays session variables, and "logout" allows
   the user to drop the session.
8. See commented-out "experiment" in DownloadServlet, line 132: To see a case of a forward
	loop, uncomment this and it will forward to URL matching the url-mapping of this servlet, 
	see infinite loop on access to 8601.
   
   Also note that this web app assumes that cookies are enabled in the user's browser, so
   that we don't have to use <c:url> for each url in use in the JSPs.
   